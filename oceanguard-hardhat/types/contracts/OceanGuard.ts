/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OceanGuardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimBadge"
      | "endorseAction"
      | "getAction"
      | "getActionsByUser"
      | "getReputation"
      | "getTotalActions"
      | "hasBadge"
      | "isBadgeClaimable"
      | "protocolId"
      | "recordAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ActionEndorsed" | "ActionRecorded" | "BadgeClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endorseAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionsByUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasBadge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBadgeClaimable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordAction",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "claimBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endorseAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBadgeClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordAction",
    data: BytesLike
  ): Result;
}

export namespace ActionEndorsedEvent {
  export type InputTuple = [actionId: BigNumberish, endorser: AddressLike];
  export type OutputTuple = [actionId: bigint, endorser: string];
  export interface OutputObject {
    actionId: bigint;
    endorser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionRecordedEvent {
  export type InputTuple = [
    actionId: BigNumberish,
    owner: AddressLike,
    actionHash: string,
    metadataURI: string,
    timestamp: BigNumberish,
    visibility: boolean
  ];
  export type OutputTuple = [
    actionId: bigint,
    owner: string,
    actionHash: string,
    metadataURI: string,
    timestamp: bigint,
    visibility: boolean
  ];
  export interface OutputObject {
    actionId: bigint;
    owner: string;
    actionHash: string;
    metadataURI: string;
    timestamp: bigint;
    visibility: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeClaimedEvent {
  export type InputTuple = [user: AddressLike, badgeId: BigNumberish];
  export type OutputTuple = [user: string, badgeId: bigint];
  export interface OutputObject {
    user: string;
    badgeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OceanGuard extends BaseContract {
  connect(runner?: ContractRunner | null): OceanGuard;
  waitForDeployment(): Promise<this>;

  interface: OceanGuardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimBadge: TypedContractMethod<
    [badgeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endorseAction: TypedContractMethod<
    [actionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAction: TypedContractMethod<
    [actionId: BigNumberish],
    [
      [string, string, string, bigint, boolean, string] & {
        owner: string;
        actionHash: string;
        metadataURI: string;
        timestamp: bigint;
        visibility: boolean;
        endorsementCount: string;
      }
    ],
    "view"
  >;

  getActionsByUser: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getReputation: TypedContractMethod<[user: AddressLike], [string], "view">;

  getTotalActions: TypedContractMethod<[], [bigint], "view">;

  hasBadge: TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;

  isBadgeClaimable: TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordAction: TypedContractMethod<
    [actionHash: string, metadataURI: string, visibility: boolean],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimBadge"
  ): TypedContractMethod<[badgeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endorseAction"
  ): TypedContractMethod<[actionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAction"
  ): TypedContractMethod<
    [actionId: BigNumberish],
    [
      [string, string, string, bigint, boolean, string] & {
        owner: string;
        actionHash: string;
        metadataURI: string;
        timestamp: bigint;
        visibility: boolean;
        endorsementCount: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActionsByUser"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalActions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasBadge"
  ): TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBadgeClaimable"
  ): TypedContractMethod<
    [user: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordAction"
  ): TypedContractMethod<
    [actionHash: string, metadataURI: string, visibility: boolean],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ActionEndorsed"
  ): TypedContractEvent<
    ActionEndorsedEvent.InputTuple,
    ActionEndorsedEvent.OutputTuple,
    ActionEndorsedEvent.OutputObject
  >;
  getEvent(
    key: "ActionRecorded"
  ): TypedContractEvent<
    ActionRecordedEvent.InputTuple,
    ActionRecordedEvent.OutputTuple,
    ActionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeClaimed"
  ): TypedContractEvent<
    BadgeClaimedEvent.InputTuple,
    BadgeClaimedEvent.OutputTuple,
    BadgeClaimedEvent.OutputObject
  >;

  filters: {
    "ActionEndorsed(uint256,address)": TypedContractEvent<
      ActionEndorsedEvent.InputTuple,
      ActionEndorsedEvent.OutputTuple,
      ActionEndorsedEvent.OutputObject
    >;
    ActionEndorsed: TypedContractEvent<
      ActionEndorsedEvent.InputTuple,
      ActionEndorsedEvent.OutputTuple,
      ActionEndorsedEvent.OutputObject
    >;

    "ActionRecorded(uint256,address,string,string,uint64,bool)": TypedContractEvent<
      ActionRecordedEvent.InputTuple,
      ActionRecordedEvent.OutputTuple,
      ActionRecordedEvent.OutputObject
    >;
    ActionRecorded: TypedContractEvent<
      ActionRecordedEvent.InputTuple,
      ActionRecordedEvent.OutputTuple,
      ActionRecordedEvent.OutputObject
    >;

    "BadgeClaimed(address,uint256)": TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
    BadgeClaimed: TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
  };
}
